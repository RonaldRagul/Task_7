# -*- coding: utf-8 -*-
"""Copy of Decision_Trees_Assignment15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b47Rb3X4xab6gjSc6pEZ4DXYxOrWhP89
"""

#Social_Network_Ads.csv

"""**Importing the libraries**"""

import numpy as np
import pandas as pd
import os
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.model_selection import RandomizedSearchCV, GridSearchCV
from sklearn import tree
from sklearn.metrics import accuracy_score,confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
from google.colab import drive
from sklearn.preprocessing import StandardScaler

"""**Importing the dataset**"""

drive.mount('/content/drive')
os.chdir('/content/drive/My Drive/Task_7')
df = pd.read_csv('Social_Network_Ads.csv')
df.head()

df.isnull().sum()

df["Gender"]=df["Gender"].map({"Male":1,"Female":2})

"""**Splitting the dataset into the Training set and Test set**"""

x=df.drop(columns=["User ID","Purchased"])
y=df["Purchased"]

x_train, x_test, y_train, y_test = train_test_split( x, y, test_size=0.2, random_state=4)
print ('Train set:', x_train.shape,  y_train.shape)
print ('Test set:', x_test.shape,  y_test.shape)

"""**Feature Scaling**"""

sc= StandardScaler() # mean = 0 and deviation = 1,
sc.fit(x_train)
x_train= sc.transform(x_train)
sc.fit(x_test)
x_test= sc.transform(x_test)
x.shape

"""**Fitting Decision Tree Classification to the Training set**"""

clf = tree.DecisionTreeClassifier(random_state=0)
clf.fit(x_train,y_train)

"""**Predicting the Test set results**"""

y_train_pred = clf.predict(x_train)
y_test_pred = clf.predict(x_test)

plt.figure(figsize=(20,20))
features = df.columns
classes = ['Yes','No']
tree.plot_tree(clf,feature_names=features,class_names=classes,filled=True)
plt.show()

"""**Making the Confusion Matrix**"""

plt.figure(figsize=(5,10))
def plot_confusionmatrix(y_train_pred,y_train,dom):
    print(f'{dom} Confusion matrix')
    cf = confusion_matrix(y_train_pred,y_train)
    sns.heatmap(cf,annot=True,yticklabels=classes
               ,xticklabels=classes,cmap='Blues', fmt='g')
    plt.tight_layout()
    plt.show()
print(f'Train score {accuracy_score(y_train_pred,y_train)}')
print(f'Test score {accuracy_score(y_test_pred,y_test)}')
plot_confusionmatrix(y_train_pred,y_train,dom='Train')
plot_confusionmatrix(y_test_pred,y_test,dom='Test')

"""**Visualising the Training set results**"""

plt.plot(x_train,y_train_pred,"o")

"""**Visualising the Test set results**"""

plt.plot(x_test,y_test_pred,"o")